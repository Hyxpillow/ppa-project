# Usage Instructions:

./main @mpl procs <P> -- <ALGO=[gn|louvain]> <SNAP_FILENAME>

Parameter Description:
<P>: Number of processors to use
<ALGO>: Selected algorithm (gn = Girvan-Newman, louvain = Louvain)
<SNAP_FILENAME>: Input graph filename, such as g1.txt, g2.txt (no path needed)

The program automatically reads graph files from the test-graph/ folder and outputs community detection results to the test-graph-output/ folder.

## Compilation:
make

## File Transfer Commands:
Send input graphs to server: make send
Receive output results from server (must be executed before running plot.py): make recv

## Result Visualization:
Use the plot.py script with the graph filename (e.g., g1.txt):
python3 plot.py g1.txt

plot.py automatically loads the graph and corresponding community partition results from test-graph/ and test-graph-output/ for visualization.

## Project Directory Structure:
- Makefile - Compilation and transfer scripts
- README.md - Project documentation
- lib/ - Library provided by professor, unmodified
- lib-local/ - Local library provided by professor, unmodified
- main.mlb - Project build file
- main.sml - Program entry point
- plot.py - Visualization script
- src/ - Project code folder
- test-graph/ - Input graph folder
- test-graph-output/ - Output results folder

## src Folder Description:
- Myprint.sml - For printing debug information
- UndirectedGraph.sml - Undirected graph implementation based on DirectedGraph, with added functionality like remove edge needed for the gn algorithm
- louvain.sml - Implementation of the parallel portion of Louvain algorithm phase1
- newman_girvan.sml - Implementation of the Girvan-Newman algorithm, calls brandes.sml to calculate maximum edge betweenness
- brandes.sml - Implementation of edge betweenness calculation (Brandes algorithm)

Define and modify NETID and PROJECT_DIR in the Makefile as needed.